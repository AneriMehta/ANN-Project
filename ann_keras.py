# -*- coding: utf-8 -*-
"""ANN-Keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NR9uJ5kEYDeCK2eyDKmu0ueKhj69nueJ
"""

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()
import numpy as np
import pandas as pd
import keras 
from keras.models import Sequential
from keras.wrappers.scikit_learn import KerasRegressor
from sklearn.preprocessing import StandardScaler 
from sklearn.linear_model import LinearRegression
from keras.layers import Dense, Activation, Dropout
from keras.optimizers import SGD
from sklearn.model_selection import train_test_split,cross_val_score,KFold
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
plt.ion()
import io
from google.colab import files

uploaded = files.upload()
dataset = pd.read_csv(io.BytesIO(uploaded['ANNdata.csv']))

import warnings
warnings.filterwarnings('ignore')
X = dataset[['Length (m)', 'Width (m)', 'Height (m)', 'Temperature', 'Vertivcaldist.(m)', 'Horizontaal dist.(m)', 'skilled labour', 'unskilled labour']]
y = dataset['Time(minutes)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)

scaler = StandardScaler() 
scaler.fit(X_train) 
StandardScaler(copy=True, with_mean=True, with_std=True)
X_train = scaler.transform(X_train) 
X_test = scaler.transform(X_test) 
r = LinearRegression() 
r.fit(X_train, y_train) 
y_predict = r.predict(X_test)
print("Accuracy: ",r.score(X_test,y_predict))
plt.scatter(X_test[:,0], y_test, c='green')
plt.scatter(X_test[:,0], y_predict, c='orange')
# plt.scatter(X_test[:,1], y_predict)
# plt.scatter(X_test[:,1], y_test)

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold

def mymodel():
  clf = Sequential()
  clf.add(Dense(6, input_shape = (8,)))
  clf.add(Activation('relu'))
  clf.add(Dropout(0.1))
  clf.add(Dense(3))
  clf.add(Activation('relu'))
  clf.add(Dropout(0.1))
  clf.add(Dense(1))
  clf.add(Activation('linear'))
  clf.add(Dropout(0.1))
  clf.compile(optimizer = "adam", loss = "mean_squared_error", metrics=['mse'])
  return clf

r = KerasRegressor(build_fn = mymodel, epochs=500, batch_size=50, verbose=0)
kfold = KFold(n_splits=5)
results = cross_val_score(r, X, y, cv=kfold)
print("Baseline: %.2f (%.2f) MSE" % (results.mean(), results.std()))
plt.scatter(X_test[:,0], y_test, color = 'red')
plt.scatter(X_test[:,0], y_predict, color = 'blue')

